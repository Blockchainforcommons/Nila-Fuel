/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.48.1
  Forc version: 0.40.1
  Fuel-Core version: 0.19.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export enum ErrorInput { PoolDoesNotExist = 'PoolDoesNotExist', LessThenMinimum = 'LessThenMinimum', MoreThenMaxnmum = 'MoreThenMaxnmum', WrongDurationPool = 'WrongDurationPool', MoreThenAvailable = 'MoreThenAvailable', AddressNotWhitelisted = 'AddressNotWhitelisted', InsufficientCollateral = 'InsufficientCollateral', BytecodeRootAlreadySet = 'BytecodeRootAlreadySet' };
export enum ErrorOutput { PoolDoesNotExist = 'PoolDoesNotExist', LessThenMinimum = 'LessThenMinimum', MoreThenMaxnmum = 'MoreThenMaxnmum', WrongDurationPool = 'WrongDurationPool', MoreThenAvailable = 'MoreThenAvailable', AddressNotWhitelisted = 'AddressNotWhitelisted', InsufficientCollateral = 'InsufficientCollateral', BytecodeRootAlreadySet = 'BytecodeRootAlreadySet' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;

export type CreditAbiConfigurables = {
  MINIMUM_DEPOSIT: BigNumberish;
  MAXIMUM_DEPOSIT: BigNumberish;
  ORACLE_ID: string;
};

interface CreditAbiInterface extends Interface {
  functions: {
    borrow: FunctionFragment;
    initialize: FunctionFragment;
    pool: FunctionFragment;
    refinance: FunctionFragment;
    repay: FunctionFragment;
    supply: FunctionFragment;
    withdraw: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'borrow', values: [BigNumberish, BigNumberish, ContractIdInput, string, BigNumberish, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'initialize', values: [ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'pool', values: [ContractIdInput, BigNumberish, ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'refinance', values: [ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'repay', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'supply', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw', values: []): Uint8Array;

  decodeFunctionData(functionFragment: 'borrow', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'initialize', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'pool', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'refinance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'repay', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'supply', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw', data: BytesLike): DecodedValue;
}

export class CreditAbi extends Contract {
  interface: CreditAbiInterface;
  functions: {
    borrow: InvokeFunction<[amount: BigNumberish, rate: BigNumberish, asset: ContractIdInput, _type: string, duration: BigNumberish, predicateaddress: IdentityInput], void>;
    initialize: InvokeFunction<[contract_bytecode_root: ContractIdInput], void>;
    pool: InvokeFunction<[asset: ContractIdInput, type_: BigNumberish, pool: ContractIdInput], void>;
    refinance: InvokeFunction<[denom_asset: ContractIdInput], void>;
    repay: InvokeFunction<[], BN>;
    supply: InvokeFunction<[type_: BigNumberish], void>;
    withdraw: InvokeFunction<[], void>;
  };
}
